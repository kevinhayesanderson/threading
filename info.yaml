Context Switching:
    thread scheduler:
        - CLR assigns local memory stack for each thread
        - static variables are shared between threads
    Timeslicing in single processor:
        - rapidly switch execution between each of the active threads
        - tens of milliseconds in windows
    preempted thread:
        - thread that has the execution interrupted, usually by time-slicing
        - thread has no control over when and where it is preempted

Threads:
    - Run in parallel within a single process
    - Share memory(Heap) with other threads running in the same application
    - Lowest-level constructs of multi-threading
    - Complicated process to return a value from a separate thread
    - to get value from another thread:
          - use a shared field to store the value from worker thread
          - use join to wait for the thread
          - access the value of shared field from main thread

Processes:
    - Are fully isolated from each other

Thread Pool:
    - Every thread has overhead in time and memory
    - Thread pools reduce the performance penalty by sharing and recycling threads
    - Thread pools only create background threads
    - Limits the no of threads that can run simultaneously
    - When limit is reached, all jobs from a queue and begin only when another job finishes
    - Thread.CurrentThread.IsThreadPoolThread property - determines if the execution is happening on a pool thread
    - Ways to enter a Thread Pool:
          - TPL
          - Asynchronous delegate
          - Background worker
          - Call ThreadPool.QueueUserWorkItem

Background Thread:
    - Identical to foreground threads, except the managed execution environment is not kept running
    - If the main thread dies, background threads will terminate abruptly

Tasks:
    - Higher-level abstractions of thread
    - Capable of returning values
    - Can be chained
    - May use a thread pool
    - Very handy for I/O bound operations
    - CPU Bound operations:
          - Uses resources of a local machine
    - I/O Bound operations:
          - Out-of-process calls(call to db, api, webServer ..etc)
          - Operations can take an indeterminate amount of time because they wait for external input
          - Release local resources while waiting for response
          - For these operations, Tasks can use TaskCompletionSource

    - Continuation:
          - Asynchronous task that is invoked by another task called an antecedent
    - Task Chaining:
          - Pass data from the antecedent to the continuation task
          - Use exception passing from antecedent to continuation
          - Control how the continuation is invoked
          - Able to cancel continuation
          - Invoke multiple continuation from same antecedent
          - Invoke continuation based on completion of antecedents

Synchronization:
    - Act of coordinating actions of multiple threads or tasks running concurrently
    - Necessary when running multiple threads to get predictable outcomes
    - Methods to Synchronization:
          - Blocking Methods:
                - Sleep
                - Join
                - Task.Wait
          - Locks:
                - Limit the no of threads
                - Exclusive locks:
                      - Allow only one thread to access a certain section of code
                      - Alternative is to use Monitor.Enter/Monitor.Exit
                      - Two kinds:
                            - Lock
                            - Mutex
                - Nonexclusive Locks:
                      - Allow multiple threads to access a resource
                      - They are:
                            - Semaphore
                            - SemaphoreSlim
                            - Reader/writer
          - Signals:
                - Allow threads to pause until they receive a signal from another thread
                - They are:
                      - Event wait handles and Monitor's Wait/Pulse methods
                      - CountdownEvent and Barrier classes
          - Nonblocking constructs:
                - Protect access to a common field
                - They are:
                      - Thread.MemoryBarrier
                      - Thread.VolatileRead
                      - Thread.VolatileWrite
                      - volatile keyword
                      - Interlocked class
    - Blocking:
          - Blocked threads do not consume CPU
          - Blocked threads do consume memory
    - Spinning:
          - Consumes CPU for as long as the thread is blocked
          - while(x < limit)//uses CPU as long as the conditions is not met

Useful Links:
    - https://www.albahari.com/

Thread Safety:
    - Code is thread safe if shared data structures are modified to ensure all threads behave properly and
      do not have unintended interactions 
    - .Net Framework static methods are thread safe
    - Not all developer created static methods are thread safe
    - When creating static methods,it is a best practice to make them thread safe

Thread Affinity:
    - Thread that instantiates an object is the only thread that is allowed to access its members
    - Pros:
        - Don't need a lock to access a UI object in WPF
        - Able to access all objects within a thread without a lock,
          since no other thread can access them
    - Cons:
        - Cannot call members on a thread that is thread safe from a different thread
        - Requires request to be marshaled to the thread-safe thread that created the object 
    
Signaling:
    - Synchronize shared resources among threads 
    - Is used to notify another thread that it can not access a resource 
      that was being used by the current thread
    - Three EventWaitHandle calls for signaling:
      - AutoResetEvent:
        - used when a thread needs exclusive access to resource
        - only one thread can access a resource at a time
        - automatically closes
        - A thread waits for a signal by calling WaitOne
        - Calling Set signals release of a waiting thread
        - If multiple threads call WaitOne, a queue is formed
        - If Set is called when no thread is waiting, the handle stays open indefinitely
        - Calling Set only releases one thread at a time, regardless of how many times it is called
        - Can be created with an initial state of "signaled" by passing "true" in the constructor parameter
      - ManualResetEvent:
        - 
      - CountdownEvent:     